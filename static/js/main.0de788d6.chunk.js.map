{"version":3,"sources":["components/ShowAddress.js","components/Address.js","components/NewAddress.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["ShowAddress","props","address","length","map","key","id","className","propertyType","unitNumber","streetType","streetNumber","style","textTransform","street","suburb","state","postcode","Address","search","fetchAdress","bind","axios","get","then","results","console","log","data","setState","e","result","address_data","listAddress","i","addressData","toLowerCase","indexOf","push","onSubmit","this","Component","SearchForm","evnt","_handleChange","_handleSubmit","event","target","value","preventDefault","type","onChange","NewAddress","newAddress","createAddress","post","history","CreateForm","_handlePropertyType","_handleUnitNumber","_handleStreetType","_handleStreetNumber","_handleStreet","_handleSuburb","_handlePostcode","_handleState","Form","Row","Group","as","Col","controlId","Label","Control","onInput","min","required","ButtonToolbar","Button","variant","href","Navbar","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0de788d6.chunk.js","sourcesContent":["import React from 'react';\n\nconst ShowAddress = (props) => {\n  const { address } = props;\n\n  if (address.length === 0) {\n    return (\n      <div>Your search is not matching. Please try again.</div>\n    )\n  } \n  return (\n    <div > \n      {address.map((address) =>\n        <div key= {address.id} className=\"address\" >\n            {address.propertyType} {\" \"}\n            {address.unitNumber} <br/>\n            { address.streetType} {\" \"}\n            {address.streetNumber} {\" \"}\n            <span style={{textTransform: 'capitalize'}}>{address.street}</span>{\", \"}  <br/>\n            <span style={{textTransform: 'capitalize'}}>{address.suburb}</span>{\", \"}  \n            <span style={{textTransform: 'uppercase'}}>{address.state}</span> {address.postcode}\n        </div>\n      )}\n    </div> \n  )\n};\n\n  export default ShowAddress;\n  \n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport ShowAddress from './ShowAddress';\nimport './Address.css';\n\nclass Address extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      address: [],\n      search: ''\n      }\n    this.fetchAdress = this.fetchAdress.bind(this); \n\n      const allAddress = () => {\n        axios.get('http://localhost:3000/addresses.json').then((results) => {\n          console.log(results.data);\n          this.setState({address : results.data});\n        })\n      };\n          \n      allAddress(); \n\n    }\n\n    fetchAdress (e) {\n      let result = e;\n      console.log(\"hi and result: \" + result);\n        axios.get('http://localhost:3000/addresses.json').then((results) => {\n          //console.log(results.data);\n          const address_data = results.data;\n          const listAddress = [];\n\n          for (let i = 0; i < address_data.length; i++) {\n            const addressData = address_data[i];\n            if( result !==\"\" && ((addressData.street.toLowerCase().indexOf( result.toLowerCase()) === -1)\n            && (addressData.streetType.toLowerCase().indexOf( result.toLowerCase()) === -1)\n            && (addressData.streetNumber.toLowerCase().indexOf( result.toLowerCase()) === -1)\n            && (addressData.suburb.toLowerCase().indexOf( result.toLowerCase()) === -1)\n            && (addressData.postcode.indexOf( result) === -1)\n            && (addressData.state.toLowerCase().indexOf( result.toLowerCase()) === -1)\n            && (addressData.unitNumber.indexOf( result) === -1)\n            && (addressData.propertyType.toLowerCase().indexOf( result.toLowerCase()) === -1))\n          ){\n           console.log(addressData);\n          }else{\n            console.log(addressData);\n            listAddress.push(addressData);\n          }\n\n        }\n        this.setState({address: listAddress});\n    })\n\n    }\n    render() {\n      return (\n        <div>\n          <h1 className=\"address-header\">Address Diary</h1>\n          <SearchForm onSubmit={ this.fetchAdress } />\n          <ShowAddress address = { this.state.address }/>\n        </div>\n      )\n    }\n};\n\nclass SearchForm extends Component {\n  constructor() {\n    super();\n    this.state = {\n      evnt: ''\n    }\n    this._handleChange = this._handleChange.bind(this);\n    this._handleSubmit = this._handleSubmit.bind(this);\n  }\n    _handleChange(event){\n      console.log(event.target.value);\n      this.setState({ evnt: event.target.value});\n      //this.props.onChange(this.state.evnt);//To make search onChange function\n    };\n\n  _handleSubmit(event){\n    event.preventDefault();\n    console.log(\"hi\");\n    this.props.onSubmit(this.state.evnt);\n  }\n  render() {\n    return (\n      <div>\n        <form onSubmit={this._handleSubmit} className=\"search-form\">\n          <div>\n            <input type=\"text\" value={this.state.evnt} \n              onChange={this._handleChange} \n              className=\"search-input\"\n            /> \n          </div> &nbsp;\n          <div>\n            <button type=\"submit\" className=\"btn-search\">Search</button>\n          </div>\n        </form>\n      </div>\n    )\n  }\n};\n\nexport default Address;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport {Form, Col, Button, ButtonToolbar} from 'react-bootstrap';\nimport './NewAddress.css'\n\nclass NewAddress extends Component {\n  constructor(){\n    super();\n    this.state = {\n      newAddress: []\n    }\n  this.createAddress = this.createAddress.bind(this);\n  }\n\n  createAddress(propertyType, unitNumber, streetType, streetNumber, street, suburb, postcode, state){\n    axios.post('http://localhost:3000/addresses.json', {\n      propertyType:propertyType, \n      unitNumber:unitNumber,\n      streetType:streetType, \n      streetNumber:streetNumber, \n      street:street,\n      suburb:suburb,\n      postcode:postcode,\n      state:state\n    }).then((result) => {\n          this.setState({ newAddress: [...this.state.newAddress, result.data ]})\n          console.log(result.data);\n          this.props.history.push(\"/\");\n      });\n    }\n    render(){\n      return(\n        <div className=\"main\">\n          <h2 className=\"h2-header\">Add New Address</h2>\n          <CreateForm onSubmit = { this.createAddress}/>\n        </div>\n        )\n    }\n};\n\nclass CreateForm extends Component {\n  constructor(){\n    super();\n    this.state = {\n      propertyType: '', \n      unitNumber: '',\n      streetType: '', \n      streetNumber: '', \n      street: '',\n      suburb: '',\n      postcode: '',\n      state: ''\n    }\n    this._handlePropertyType = this._handlePropertyType.bind(this);\n    this._handleUnitNumber = this._handleUnitNumber.bind(this);\n    this._handleStreetType = this._handleStreetType.bind(this);\n    this._handleStreetNumber = this._handleStreetNumber.bind(this);\n    this._handleStreet = this._handleStreet.bind(this);\n    this._handleSuburb = this._handleSuburb.bind(this);\n    this._handlePostcode = this._handlePostcode.bind(this);\n    this._handleState = this._handleState.bind(this);\n    this._handleSubmit = this._handleSubmit.bind(this);\n    }\n    _handlePropertyType(e){\n      this.setState({propertyType: e.target.value})\n    };\n    _handleUnitNumber(e){\n      this.setState({unitNumber: e.target.value})\n    };\n    _handleStreetType(e){\n      this.setState({streetType: e.target.value})\n    };\n    _handleStreetNumber(e){\n      this.setState({streetNumber: e.target.value})\n    };\n    _handleStreet(e){\n      this.setState({street: e.target.value})\n    };\n    _handleSuburb(e){\n      this.setState({suburb: e.target.value})\n    };\n    _handlePostcode(e){\n      this.setState({postcode: e.target.value})\n    };\n    _handleState(e){\n      this.setState({state: e.target.value})\n    }\n    _handleSubmit(e){\n      e.preventDefault();\n      this.props.onSubmit(\n        this.state.propertyType, \n        this.state.unitNumber, \n        this.state.streetType,\n        this.state.streetNumber,\n        this.state.street,\n        this.state.suburb,\n        this.state.postcode,\n        this.state.state\n        )\n    };\n    render(){\n        return (\n        <Form onSubmit = {this._handleSubmit} className=\"form-container\">\n          <Form.Row>\n            <Form.Group as={Col} controlId=\"formGridEmail\">\n              <Form.Label className=\"label\">Property Type:</Form.Label>\n                <Form.Control as=\"select\" type=\"text\" \n                  className=\"input\"\n                  onInput = {this._handlePropertyType} >\n                  <option></option>\n                  <option>House</option>\n                  <option>Apartment</option>\n                </Form.Control>\n            </Form.Group>\n        \n        \n            <Form.Group as={Col} controlId=\"formGridPassword\">\n              <Form.Label className=\"label\">Unit No.:</Form.Label>\n                <Form.Control type=\"number\" \n                  onInput = {this._handleUnitNumber} \n                  min=\"1\"\n                  className=\"input\"\n                />\n            </Form.Group>\n          </Form.Row>\n        \n          <Form.Row>\n            <Form.Group as={Col} controlId=\"formGridCity\">\n              <Form.Label className=\"label\">Street Type:</Form.Label>\n                <Form.Control type=\"text\" \n                  onInput = {this._handleStreetType} \n                  className=\"input\"\n                />\n                <br />\n            </Form.Group>\n        \n            <Form.Group as={Col} controlId=\"formGridState\">\n              <Form.Label className=\"red label\">Street No.: </Form.Label>\n                <Form.Control type=\"text\" \n                  onInput = {this._handleStreetNumber} \n                  required \n                  className=\"input\"\n                />\n                <br />\n            </Form.Group>\n            \n            <Form.Group as={Col} controlId=\"formGridZip\">\n              <Form.Label className=\"red label\">Street:</Form.Label>\n                <Form.Control type=\"text\" \n                  onInput = {this._handleStreet} \n                  required\n                  className=\"input\" \n                />\n                <br />\n            </Form.Group>\n          </Form.Row>\n\n          <Form.Row>\n            <Form.Group as={Col} controlId=\"formGridCity\">\n              <Form.Label className=\"red label\">Suburb:</Form.Label>\n                <Form.Control type=\"text\" \n                  onInput = {this._handleSuburb} \n                  required \n                  style={{textTransform: 'capitalize'}}\n                  className=\"input\"\n                />\n                <br />\n            </Form.Group>\n\n            <Form.Group as={Col} controlId=\"formGridState\">\n              <Form.Label className=\"red label\">Post Code:</Form.Label>\n                <Form.Control type=\"number\" \n                  onInput = {this._handlePostcode} \n                  required min=\"1\" \n                  className=\"input\"\n                />\n                <br />\n            </Form.Group>\n                \n            <Form.Group as={Col} controlId=\"formGridZip\">\n              <Form.Label className=\"red label\">State:</Form.Label>\n                <Form.Control type=\"text\" \n                  onInput = {this._handleState} \n                  required \n                  style={{textTransform: 'uppercase'}}\n                  className=\"input\"\n                />\n                <br />\n            </Form.Group>\n                \n          </Form.Row>\n            \n            <ButtonToolbar>\n              <Button variant=\"dark\" type=\"submit\">Create Address</Button> &nbsp; &nbsp;\n               <a href=\"/\"><Button variant=\"dark\">Go to Home Page</Button></a>\n            </ButtonToolbar>\n            <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>\n        </Form>\n        )\n    }\n};\n\nexport default NewAddress;\n","import React from 'react';\nimport './Navbar.css';\n\nconst Navbar = () => (\n  <div>\n    <ul className=\"nav\">\n      <li><a href=\"/\">Home</a></li>\n      <li><a href=\"/newAddress\">Add New Address</a></li>\n    </ul>\n  </div>\n);\n\nexport default Navbar;\n","import React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Address from './components/Address';\nimport NewAddress from './components/NewAddress';\nimport Navbar from './components/Navbar';\n\n\nfunction App() {\n  return (\n    <div>\n       <BrowserRouter>\n        <Navbar/>\n        <Route exact path=\"/\" component = {Address} />\n        <Route exact path=\"/newAddress\" component = {NewAddress} />\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}